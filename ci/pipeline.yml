# the following vars must be specified:
#
#   ((release_major)) the MAJOR version, e.g. 5
#   ((release_minor)) the MAJOR.MINOR version, e.g. 5.1
#   ((concourse_smoke_deployment_name)) a unique name for the smoke bosh deployment
#
# the following git branches need to be created:
#
#   concourse/concourse                 release/((release_minor)).x
#   concourse/concourse-bosh-release    release/((release_minor)).x
#   concourse/concourse-bosh-deployment release/((release_minor)).x
#
# everything else will be managed by the pipeline

resource_types:
- name: gcs
  type: registry-image
  source: {repository: frodenas/gcs-resource}

# needed for 'tag' file creation; can be removed once shipped
- name: registry-image
  type: registry-image
  source: {repository: concourse/registry-image-resource}

- name: bosh-release
  type: registry-image
  source: {repository: dpb587/bosh-release-resource}

- name: bosh-deployment
  type: registry-image
  source: {repository: cloudfoundry/bosh-deployment-resource}

- name: github-release
  type: registry-image
  source: {repository: concourse/github-release-resource}

- name: semver
  type: registry-image
  source: {repository: concourse/semver-resource}

- name: s3
  type: registry-image
  source: {repository: concourse/s3-resource}

- name: bosh-io-release
  type: registry-image
  source: {repository: concourse/bosh-io-release-resource}

- name: bosh-io-stemcell
  type: registry-image
  source: {repository: concourse/bosh-io-stemcell-resource}

groups:
- name: develop
  jobs:
  - unit
  - dev-image
  - testflight
  - watsjs
  - rc
  - build-rc
  - build-rc-image
  - bin-smoke
  - upgrade
  - downgrade

- name: k8s
  jobs:
  - k8s-check-helm-params
  - k8s-smoke
  - k8s-topgun

- name: bosh
  jobs:
  - bosh-bump
  - bosh-smoke
  - bosh-topgun
  - bosh-wings-deploy
  - bosh-check-props

- name: publish
  jobs:
  - shipit
  - publish-binaries
  - publish-image
  - publish-bosh-release
  - publish-docs
  - patch

jobs:
- name: unit
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      trigger: true
    - get: unit-image
      trigger: true
    - get: ci
  - task: yarn-test
    image: unit-image
    file: ci/tasks/yarn-test.yml
  - in_parallel:
    - task: unit
      image: unit-image
      file: ci/tasks/unit.yml
      input_mapping: {concourse: built-concourse}
      timeout: 1h
    - task: fly-darwin
      file: ci/tasks/fly-darwin.yml
      timeout: 1h
    - task: fly-windows
      file: ci/tasks/fly-windows.yml
      timeout: 1h

- name: dev-image
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      trigger: true
    - get: unit-image
      trigger: true
    - get: gdn
      trigger: true
    - get: dumb-init
      trigger: true
    - get: bosh-io-release-resource
      trigger: true
    - get: bosh-io-stemcell-resource
      trigger: true
    - get: cf-resource
      trigger: true
    - get: docker-image-resource
      trigger: true
    - get: git-resource
      trigger: true
    - get: github-release-resource
      trigger: true
    - get: hg-resource
      trigger: true
    - get: pool-resource
      trigger: true
    - get: registry-image-resource
      trigger: true
    - get: s3-resource
      trigger: true
    - get: semver-resource
      trigger: true
    - get: time-resource
      trigger: true
    - get: tracker-resource
      trigger: true
    - get: mock-resource
      trigger: true
    - get: builder
    - get: ci
  - task: yarn-build
    image: unit-image
    file: ci/tasks/yarn-build.yml
  - in_parallel:
    - task: fly-linux
      file: ci/tasks/fly-build-linux.yml
    - task: fly-windows
      file: ci/tasks/fly-build-windows.yml
    - task: fly-darwin
      file: ci/tasks/fly-build-darwin.yml
  - task: build
    image: builder
    privileged: true
    input_mapping: {concourse: built-concourse}
    file: ci/tasks/build-dev-image.yml
  - put: dev-image
    params: {image: image/image.tar}
    get_params: {format: oci}

- name: testflight
  public: true
  max_in_flight: 2
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
      params: {format: oci}
      trigger: true
    - get: unit-image
      passed: [unit, dev-image]
    - get: postgres-image
      params: {format: oci}
    - get: ci
  - task: testflight
    image: unit-image
    privileged: true
    timeout: 1h
    file: ci/tasks/docker-compose-testflight.yml

- name: watsjs
  public: true
  max_in_flight: 2
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
      params: {format: oci}
      trigger: true
    - get: unit-image
      passed: [unit, dev-image]
    - get: postgres-image
      params: {format: oci}
    - get: ci
  - task: watsjs
    image: unit-image
    privileged: true
    timeout: 1h
    file: ci/tasks/docker-compose-watsjs.yml

- name: upgrade
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
      params: {format: oci}
      trigger: true
    - get: unit-image
      passed: [unit, dev-image]
    - get: concourse-image
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: ci
  - task: upgrade-test
    privileged: true
    image: unit-image
    file: ci/tasks/upgrade-test.yml

- name: downgrade
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
      params: {format: oci}
      trigger: true
    - get: unit-image
      passed: [unit, dev-image]
    - get: concourse-image
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: ci
  - task: downgrade-test
    privileged: true
    image: unit-image
    file: ci/tasks/downgrade-test.yml

- name: k8s-check-helm-params
  public: true
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc-image]
      trigger: true
    - get: concourse-rc-image
      passed: [build-rc-image]
      trigger: true
    - get: version
      passed: [build-rc-image]
      trigger: true
    - get: unit-image
      passed: [build-rc-image]
      trigger: true
    - get: linux-rc
      passed: [build-rc-image]
      trigger: true
    - get: charts
      trigger: true
    - get: ci
  - task: check-params
    file: ci/tasks/check-distribution-env.yml
    image: unit-image
    input_mapping: {distribution: charts}
    params: {DISTRIBUTION: helm}

- name: k8s-smoke
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc-image]
      trigger: true
    - get: concourse-rc-image
      passed: [build-rc-image]
      params: {format: oci}
      trigger: true
    - get: version
      passed: [build-rc-image]
      trigger: true
    - get: charts
      trigger: true
    - get: unit-image
      passed: [build-rc-image]
    - get: ci
  - try:
      task: try-delete
      image: unit-image
      file: ci/tasks/k8s-delete.yml
      params:
        KUBE_CONFIG: ((kube_config))
        RELEASE_NAME: ((concourse_smoke_deployment_name))
        CONCOURSE_IMAGE: concourse/concourse-rc
  - task: deploy
    image: unit-image
    input_mapping: {image-info: concourse-rc-image}
    file: ci/tasks/k8s-deploy.yml
    params:
      KUBE_CONFIG: ((kube_config))
      RELEASE_NAME: ((concourse_smoke_deployment_name))
      CONCOURSE_IMAGE: concourse/concourse-rc
  - task: k8s-smoke
    image: unit-image
    file: ci/tasks/k8s-smoke.yml
    params:
      KUBE_CONFIG: ((kube_config))
      RELEASE_NAME: ((concourse_smoke_deployment_name))
      MAX_TICKS: 180
  - task: delete
    image: unit-image
    file: ci/tasks/k8s-delete.yml
    params:
      KUBE_CONFIG: ((kube_config))
      RELEASE_NAME: ((concourse_smoke_deployment_name))
      CONCOURSE_IMAGE: concourse/concourse-rc

- name: k8s-topgun
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [k8s-smoke]
      trigger: true
    - get: version
      passed: [k8s-smoke]
      trigger: true
    - get: concourse-rc-image
      passed: [k8s-smoke]
      trigger: true
      params: {format: oci}
    - get: unit-image
      passed: [k8s-smoke]
      trigger: true
    - get: charts
      trigger: true
      passed: [k8s-smoke]
    - get: ci
  - task: k8s-topgun
    file: ci/tasks/k8s-topgun.yml
    image: unit-image
    params:
      KUBE_CONFIG: ((kube_config))
      CONCOURSE_IMAGE_NAME: concourse/concourse-rc

- name: rc
  public: true
  serial_groups: [version]
  plan:
  - in_parallel:
    - get: concourse
      passed: [testflight, watsjs, upgrade, downgrade]
      trigger: true
    - get: dev-image
      trigger: true
      passed: [testflight, watsjs, upgrade, downgrade]
    - get: unit-image
      passed: [testflight, watsjs, upgrade, downgrade]
      trigger: true
  - put: version
    params: {pre: rc}

- name: build-rc
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [rc]
      trigger: true
    - get: unit-image
      passed: [rc]
      trigger: true
    - get: dev-image
      passed: [rc]
      trigger: true
    - get: version
      passed: [rc]
      trigger: true
    - get: final-version
      resource: version
      passed: [rc]
      params: {bump: final}
    - get: ci
  - in_parallel:
    - task: fly-linux
      file: ci/tasks/fly-build-linux.yml
    - task: fly-windows
      file: ci/tasks/fly-build-windows.yml
    - task: fly-darwin
      file: ci/tasks/fly-build-darwin.yml
  - task: hoist-linux-dependencies
    image: dev-image
    file: ci/tasks/hoist-linux-dependencies.yml
  - task: yarn-build
    image: unit-image
    file: ci/tasks/yarn-build.yml
  - in_parallel:
    - task: concourse-linux
      image: unit-image
      file: ci/tasks/concourse-build-linux.yml
      input_mapping: {concourse: built-concourse}
    - task: concourse-windows
      file: ci/tasks/concourse-build-windows.yml
      input_mapping: {concourse: built-concourse}
    - task: concourse-darwin
      file: ci/tasks/concourse-build-darwin.yml
      input_mapping: {concourse: built-concourse}
  - in_parallel:
    - put: linux-rc
      params: {file: concourse-linux/concourse-*.tgz}
      inputs: [concourse-linux]
    - put: windows-rc
      params: {file: concourse-windows/concourse-*.zip}
      inputs: [concourse-windows]
    - put: darwin-rc
      params: {file: concourse-darwin/concourse-*.tgz}
      inputs: [concourse-darwin]

- name: build-rc-image
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc]
      trigger: true
    - get: version
      passed: [build-rc]
      trigger: true
    - get: linux-rc
      trigger: true
      passed: [build-rc]
    - get: unit-image
      passed: [build-rc]
    - get: builder
    - get: ci
  - task: build
    image: builder
    privileged: true
    file: ci/tasks/build-rc-image.yml
  - put: concourse-rc-image
    params:
      image: image/image.tar
      additional_tags: version/version
    get_params: {format: oci}

- name: bin-smoke
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc]
      trigger: true
    - get: version
      passed: [build-rc]
      trigger: true
    - get: linux-rc
      passed: [build-rc]
      trigger: true
    - get: unit-image
      passed: [build-rc]
      trigger: true
    - get: ci
  - task: terraform-smoke
    file: ci/tasks/terraform-smoke.yml
    params:
      GCP_PROJECT: cf-concourse-production
      GCP_KEY: ((concourse_smoke_gcp_key))
      SSH_KEY: ((concourse_smoke_ssh_key))
      DEPLOYMENT: smoke
  - task: smoke
    image: unit-image
    file: ci/tasks/smoke.yml
    input_mapping: {endpoint-info: outputs}

- name: bosh-check-props
  public: true
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: concourse
      passed: [bin-smoke]
      trigger: true
    - get: unit-image
      passed: [bin-smoke]
      trigger: true
    - get: version
      passed: [bin-smoke]
      trigger: true
    - get: linux-rc
      passed: [bin-smoke]
      trigger: true
    - get: concourse-release-repo
    - get: ci
  - task: check-props
    file: ci/tasks/check-distribution-env.yml
    image: unit-image
    input_mapping: {distribution: concourse-release-repo}
    params: {DISTRIBUTION: bosh}

- name: bosh-bump
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [bosh-check-props]
      trigger: true
    - get: unit-image
      passed: [bosh-check-props]
      trigger: true
    - get: version
      passed: [bosh-check-props]
      trigger: true
    - get: linux-rc
      passed: [build-rc, bosh-check-props]
      trigger: true
    - get: windows-rc
      passed: [build-rc]
      trigger: true
    - get: concourse-release-repo
    - get: ci
  - task: bump-concourse-blobs
    file: ci/tasks/bump-concourse-blobs.yml
    image: unit-image
    params: {GCP_JSON_KEY: ((concourse_artifacts_json_key))}
  - put: concourse-release-repo
    params: {repository: bumped-concourse-release-repo}

- name: bosh-smoke
  public: true
  serial: true
  plan:
  - in_parallel:
    # these don't trigger, to ensure that the job gets triggered by
    # concourse-release, which is unfortunately decoupled from the resource
    # that we 'put' to.
    - get: concourse
      passed: [bosh-bump]
    - get: unit-image
      passed: [bosh-bump]
    - get: version
      passed: [bosh-bump]
    - get: concourse-release
      trigger: true
    - get: postgres-release
      trigger: true
    - get: bpm-release
      trigger: true
    - get: gcp-xenial-stemcell
      trigger: true
    - get: ci
  - put: smoke-deployment
    params:
      manifest: concourse/ci/deployments/bosh-smoke.yml
      releases:
      - concourse-release/*.tgz
      - postgres-release/*.tgz
      - bpm-release/*.tgz
      stemcells:
      - gcp-xenial-stemcell/*.tgz
      vars:
        deployment_name: ((concourse_smoke_deployment_name))
  - task: discover-bosh-endpoint-info
    file: ci/tasks/discover-bosh-endpoint-info.yml
    image: unit-image
    params:
      BOSH_ENVIRONMENT: ((bosh_target))
      BOSH_CLIENT: ((bosh_client.id))
      BOSH_CLIENT_SECRET: ((bosh_client.secret))
      BOSH_DEPLOYMENT: ((concourse_smoke_deployment_name))
      BOSH_INSTANCE_GROUP: concourse
  - task: smoke
    image: unit-image
    file: ci/tasks/smoke.yml

- name: bosh-topgun
  public: true
  serial: true
  interruptible: true
  plan:
  - in_parallel:
    # these don't trigger, to ensure that the job gets triggered by
    # concourse-release, which is unfortunately decoupled from the resource
    # that we 'put' to.
    - get: concourse
      passed: [bosh-bump]
    - get: unit-image
      passed: [bosh-bump]
    - get: version
      passed: [bosh-bump]
    - get: concourse-release
      trigger: true
    - get: postgres-release
      trigger: true
    - get: bpm-release
      trigger: true
    - get: backup-and-restore-sdk-release
      trigger: true
    - get: gcp-xenial-stemcell
      trigger: true
    - get: vault-release
      trigger: true
    - get: credhub-release
      trigger: true
    - get: bbr
      trigger: true
    - get: ci
  - task: bosh-topgun
    file: ci/tasks/topgun.yml
    image: unit-image
    input_mapping:
      stemcell: gcp-xenial-stemcell
    params:
      DEPLOYMENT_NAME_PREFIX: concourse-topgun-((release_minor))
      BOSH_ENVIRONMENT: ((bosh_target))
      BOSH_CA_CERT: ((tmp_bosh_client.ca_cert))
      BOSH_CLIENT: ((bosh_client.id))
      BOSH_CLIENT_SECRET: ((bosh_client.secret))
      BOSH_SSH_KEY: ((topgun_bosh_key))
      AWS_REGION: ((topgun_aws_ssm.region))
      AWS_ACCESS_KEY_ID: ((topgun_aws_ssm.access_key_id))
      AWS_SECRET_ACCESS_KEY: ((topgun_aws_ssm.secret_access_key))

- name: bosh-wings-deploy
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [bosh-smoke, bosh-topgun]
    - get: version
      passed: [bosh-smoke, bosh-topgun]
    - get: concourse-release
      passed: [bosh-smoke, bosh-topgun]
    - get: bpm-release
      passed: [bosh-smoke, bosh-topgun]
    - get: gcp-xenial-stemcell
      passed: [bosh-smoke, bosh-topgun]
    - get: cbd
    - get: prod
  - put: wings-deployment
    params:
      manifest: cbd/cluster/concourse.yml
      stemcells:
      - gcp-xenial-stemcell/*.tgz
      releases:
      - concourse-release/*.tgz
      - bpm-release/*.tgz
      ops_files:
      - cbd/cluster/operations/dev-versions.yml
      - cbd/cluster/operations/debug-concourse.yml
      - cbd/cluster/operations/privileged-http.yml
      - cbd/cluster/operations/privileged-https.yml
      - cbd/cluster/operations/tls.yml
      - cbd/cluster/operations/web-network-extension.yml
      - cbd/cluster/operations/scale.yml
      - cbd/cluster/operations/syslog_forwarder.yml
      - cbd/cluster/operations/team-authorized-keys.yml
      - cbd/cluster/operations/storage-driver.yml
      - cbd/cluster/operations/external-postgres.yml
      - cbd/cluster/operations/external-postgres-tls.yml
      - cbd/cluster/operations/influxdb.yml
      - cbd/cluster/operations/container-placement-strategy.yml
      - cbd/cluster/operations/github-auth.yml
      - cbd/cluster/operations/add-local-users.yml
      - cbd/cluster/operations/worker-rebalancing.yml
      - cbd/cluster/operations/encryption.yml
      - cbd/cluster/operations/garden-dns.yml
      - cbd/cluster/operations/max-in-flight.yml
      - cbd/cluster/operations/worker-max-in-flight.yml
      - cbd/cluster/operations/enable-global-resources.yml
      - prod/wings/ops.yml
      vars_files:
      - prod/wings/vars.yml

- name: shipit
  public: true
  serial_groups: [version]
  plan:
  - get: concourse
    passed:
    - build-rc
    - k8s-topgun
    - k8s-check-helm-params
    - bosh-smoke
    - bosh-topgun
  - get: unit-image
    passed:
    - build-rc
    - k8s-topgun
    - k8s-check-helm-params
    - bosh-smoke
    - bosh-topgun
  - get: final-version
    resource: version
    params: {bump: final}
    passed:
    - build-rc
    - k8s-topgun
    - k8s-check-helm-params
    - bosh-smoke
    - bosh-topgun
  - get: linux-rc
    passed: [build-rc]
  - get: windows-rc
    passed: [build-rc]
  - get: darwin-rc
    passed: [build-rc]
  - get: concourse-rc-image
    passed: [k8s-topgun, k8s-check-helm-params]
  - get: concourse-release
    passed: [bosh-smoke, bosh-topgun]
  - get: bpm-release
    passed: [bosh-smoke, bosh-topgun]
  - get: postgres-release
    passed: [bosh-smoke, bosh-topgun]
  - put: version
    params: {file: final-version/version}

- name: publish-binaries
  serial: true
  plan:
  - in_parallel:
    - get: version
      passed: [shipit]
      trigger: true
    - get: concourse
      passed: [shipit]
    - get: unit-image
      passed: [shipit]
    - get: linux-rc
      passed: [shipit]
    - get: windows-rc
      passed: [shipit]
    - get: darwin-rc
      passed: [shipit]
    - get: ci
  - task: prep-release-assets
    file: ci/tasks/prep-release-assets.yml
    image: unit-image
  - task: build-release-notes
    file: ci/tasks/build-release-notes.yml
    image: unit-image
  - put: concourse-github-release
    params:
      commitish: concourse/.git/ref
      tag: version/version
      tag_prefix: v
      name: release-notes/release-name
      body: release-notes/notes.md
      globs:
      - concourse-linux/*.tgz
      - concourse-windows/*.zip
      - concourse-darwin/*.tgz
      - fly-linux/fly-*-linux-*.tgz
      - fly-windows/fly-*-windows-*.zip
      - fly-darwin/fly-*-darwin-*.tgz

- name: publish-bosh-release
  serial: true
  plan:
  - in_parallel:
    - get: version
      passed: [shipit]
      trigger: true
    - get: concourse-release
      passed: [shipit]
  - put: concourse-release-final
    params:
      tarball: concourse-release/*.tgz
      version: version/version

- name: publish-image
  serial: true
  plan:
  - in_parallel:
    - get: version
      passed: [shipit]
      trigger: true
    - get: concourse
      passed: [shipit]
    - get: concourse-rc-image
      passed: [shipit]
      params: {format: oci}
    - get: latest-version
    - get: latest-of-same-major-version
    - get: ci
  - task: docker-semver-tags
    file: ci/tasks/docker-semver-tags.yml
  - put: concourse-image
    params:
      image: concourse-rc-image/image.tar
      additional_tags: tags/tags

- name: publish-docs
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: version
      passed: [shipit]
      trigger: true
    - get: docs
  - task: build-docs
    file: docs/ci/build.yml
    params: {ANALYTICS_ID: ((analytics_id))}
  - put: docs-gh-pages
    params: {repository: built-docs}

- name: patch
  public: true
  serial_groups: [version]
  plan:
  - get: version
    passed: [shipit]
    trigger: true
  - put: version
    params: {bump: patch, pre: rc}

resources:
- name: concourse
  type: git
  icon: &git-icon github-circle
  source:
    uri: https://github.com/concourse/concourse.git
    branch: release/((release_minor)).x

- name: ci
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/ci.git
    branch: master

- name: dev-image
  type: registry-image
  icon: &image-icon docker
  source:
    repository: concourse/dev
    username: ((docker.username))
    password: ((docker.password))
    tag: release-((release_minor))

- name: concourse-rc-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse-rc
    username: ((docker.username))
    password: ((docker.password))
    tag: release-((release_minor))

- name: concourse-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse
    username: ((docker.username))
    password: ((docker.password))

    # avoid tagging as 'latest' in case this is a patch release for an older
    # version
    tag: ((release_minor))

- name: version
  type: semver
  icon: tag
  source:
    driver: gcs
    json_key: ((concourse_artifacts_json_key))

    bucket: concourse-artifacts
    key: version-((release_minor))
    initial_version: ((release_minor)).1

- name: latest-version
  type: github-release
  icon: &release-icon package-variant-closed
  source:
    owner: concourse
    repository: concourse
    access_token: ((concourse_github_release.access_token))

- name: latest-of-same-major-version
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: concourse
    access_token: ((concourse_github_release.access_token))
    tag_filter: '^v(((release_major))\.\d+\.\d+)$'

- name: linux-rc
  type: gcs
  icon: linux
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: rcs/concourse-(.*)-linux-amd64.tgz

- name: windows-rc
  type: gcs
  icon: windows
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: rcs/concourse-(.*)-windows-amd64.zip

- name: darwin-rc
  type: gcs
  icon: apple
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: rcs/concourse-(.*)-darwin-amd64.tgz

- name: docs
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/docs
    branch: master

- name: docs-gh-pages
  type: git
  icon: *git-icon
  source:
    uri: git@github.com:concourse/docs
    branch: gh-pages
    private_key: ((docs_deploy_key))

- name: concourse-release
  type: bosh-release
  icon: *release-icon
  source:
    uri: https://github.com/concourse/concourse-bosh-release
    branch: release/((release_minor)).x
    dev_releases: true
    private_config: &release_private_config
      blobstore:
        provider: gcs
        options:
          credentials_source: static
          json_key: ((concourse_artifacts_json_key))

- name: concourse-release-final
  type: bosh-release
  icon: *release-icon
  source:
    uri: git@github.com:concourse/concourse-bosh-release
    branch: master
    private_config: *release_private_config
    private_key: ((concourse_release_deploy_key))

- name: concourse-release-repo
  type: git
  icon: *git-icon
  source:
    uri: git@github.com:concourse/concourse-bosh-release
    branch: release/((release_minor)).x
    private_key: ((concourse_release_deploy_key))

- name: smoke-deployment
  type: bosh-deployment
  icon: fire
  source:
    target: ((bosh_target))
    client: ((bosh_client.id))
    client_secret: ((bosh_client.secret))
    deployment: ((concourse_smoke_deployment_name))

- name: wings-deployment
  type: bosh-deployment
  icon: airplane-takeoff
  source:
    target: ((bosh_target))
    client: ((bosh_client.id))
    client_secret: ((bosh_client.secret))
    deployment: concourse-wings

- name: cbd
  type: git
  icon: *git-icon
  source:
    uri: git@github.com:concourse/concourse-bosh-deployment.git
    branch: release/((release_minor)).x
    private_key: ((concourse_deployment_repo_private_key))

- name: charts
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/helm/charts.git
    branch: master

- name: prod
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/prod.git
    branch: master

- name: concourse-github-release
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: concourse
    access_token: ((concourse_github_release.access_token))

- name: unit-image
  type: registry-image
  icon: *image-icon
  source: {repository: concourse/unit}

- name: builder
  type: registry-image
  icon: *image-icon
  source: {repository: concourse/builder}

- name: gcp-xenial-stemcell
  type: bosh-io-stemcell
  icon: *release-icon
  source: {name: bosh-google-kvm-ubuntu-xenial-go_agent}

- name: postgres-image
  type: registry-image
  icon: *image-icon
  source: {repository: postgres}

- name: dumb-init
  type: github-release
  icon: *release-icon
  source:
    owner: Yelp
    repository: dumb-init
    access_token: ((concourse_github_dummy.access_token))

- name: bbr
  type: github-release
  icon: *release-icon
  source:
    owner: cloudfoundry-incubator
    repository: bosh-backup-and-restore
    access_token: ((concourse_github_dummy.access_token))

- name: gdn
  type: github-release
  icon: *release-icon
  source:
    owner: cloudfoundry
    repository: garden-runc-release
    access_token: ((concourse_github_dummy.access_token))

- name: postgres-release
  type: bosh-io-release
  icon: *release-icon
  source: {repository: cloudfoundry/postgres-release}

- name: bpm-release
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: cloudfoundry-incubator/bpm-release

- name: vault-release
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: vito/vault-boshrelease

- name: credhub-release
  type: bosh-io-release
  icon: *release-icon
  source: {repository: pivotal-cf/credhub-release}
  version: {version: 1.9.5}

- name: backup-and-restore-sdk-release
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: cloudfoundry-incubator/backup-and-restore-sdk-release

- name: mock-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: mock-resource
    access_token: ((concourse_github_dummy.access_token))

- name: bosh-io-release-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: bosh-io-release-resource
    access_token: ((concourse_github_dummy.access_token))

- name: bosh-io-stemcell-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: bosh-io-stemcell-resource
    access_token: ((concourse_github_dummy.access_token))

- name: cf-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: cf-resource
    access_token: ((concourse_github_dummy.access_token))

- name: docker-image-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: docker-image-resource
    access_token: ((concourse_github_dummy.access_token))

- name: git-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: git-resource
    access_token: ((concourse_github_dummy.access_token))

- name: github-release-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: github-release-resource
    access_token: ((concourse_github_dummy.access_token))

- name: hg-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: hg-resource
    access_token: ((concourse_github_dummy.access_token))

- name: pool-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: pool-resource
    access_token: ((concourse_github_dummy.access_token))

- name: registry-image-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: registry-image-resource
    access_token: ((concourse_github_dummy.access_token))

- name: s3-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: s3-resource
    access_token: ((concourse_github_dummy.access_token))

- name: semver-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: semver-resource
    access_token: ((concourse_github_dummy.access_token))

- name: time-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: time-resource
    access_token: ((concourse_github_dummy.access_token))

- name: tracker-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: tracker-resource
    access_token: ((concourse_github_dummy.access_token))
